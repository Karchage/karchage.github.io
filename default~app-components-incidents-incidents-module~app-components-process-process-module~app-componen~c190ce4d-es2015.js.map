{"version":3,"sources":["./node_modules/@ngrx/entity/fesm2015/entity.js","./src/app/services/user.service.ts","./src/app/store/effects/user.effects.ts","./src/app/store/reducers/user.reducer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAC6C;AACH;;AAE1C;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iDAAiD;AACjD;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,0BAA0B,kEAAc;AACxC,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,EAAE;AAC/B,mBAAmB,EAAE;AACrB,4BAA4B,kEAAc;AAC1C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAc;AACrC,4BAA4B,kEAAc;AAC1C,uBAAuB,kEAAc;AACrC,yBAAyB,kEAAc;AACvC;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,sCAAsC;AACtC;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC,UAAU,uCAAuC;AACpF;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+BAA+B;AAC/B;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,mCAAmC;AAC9C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA,yCAAyC;AACzC,WAAW,yBAAyB,kBAAkB;AACtD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oCAAoC;AACpC,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB;;AAEA;AACA;AACA,cAAc,uFAAu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","file":"default~app-components-incidents-incidents-module~app-components-process-process-module~app-componen~c190ce4d-es2015.js","sourcesContent":["/**\n * @license NgRx 8.4.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template V\n * @return {?}\n */\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\n/**\n * @template V\n * @return {?}\n */\nfunction createInitialStateFactory() {\n    /**\n     * @param {?=} additionalState\n     * @return {?}\n     */\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @return {?}\n */\nfunction createSelectorsFactory() {\n    /**\n     * @param {?=} selectState\n     * @return {?}\n     */\n    function getSelectors(selectState) {\n        /** @type {?} */\n        const selectIds = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.ids);\n        /** @type {?} */\n        const selectEntities = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.entities);\n        /** @type {?} */\n        const selectAll = createSelector(selectIds, selectEntities, (/**\n         * @param {?} ids\n         * @param {?} entities\n         * @return {?}\n         */\n        (ids, entities) => ids.map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => ((/** @type {?} */ (entities)))[id]))));\n        /** @type {?} */\n        const selectTotal = createSelector(selectIds, (/**\n         * @param {?} ids\n         * @return {?}\n         */\n        ids => ids.length));\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst DidMutate = {\n    EntitiesOnly: 0,\n    Both: 1,\n    None: 2,\n};\nDidMutate[DidMutate.EntitiesOnly] = 'EntitiesOnly';\nDidMutate[DidMutate.Both] = 'Both';\nDidMutate[DidMutate.None] = 'None';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nfunction createStateOperator(mutator) {\n    return (/**\n     * @template S\n     * @param {?} arg\n     * @param {?} state\n     * @return {?}\n     */\n    function operation(arg, state) {\n        /** @type {?} */\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: Object.assign({}, state.entities),\n        };\n        /** @type {?} */\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return Object.assign({}, state, { entities: clonedEntityState.entities });\n        }\n        return state;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} entity\n * @param {?} selectId\n * @return {?}\n */\nfunction selectIdValue(entity, selectId) {\n    /** @type {?} */\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nfunction createUnsortedStateAdapter(selectId) {\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(entities, state) {\n        /** @type {?} */\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    /**\n     * @param {?} keysOrPredicate\n     * @param {?} state\n     * @return {?}\n     */\n    function removeManyMutably(keysOrPredicate, state) {\n        /** @type {?} */\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => keysOrPredicate(state.entities[key])));\n        /** @type {?} */\n        const didMutate = keys\n            .filter((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => key in state.entities))\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => delete state.entities[key])).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @return {?}\n             */\n            (id) => id in state.entities));\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    /**\n     * @param {?} keys\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeNewKey(keys, update, state) {\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        /** @type {?} */\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const newKeys = {};\n        updates = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => update.id in state.entities));\n        /** @type {?} */\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            /** @type {?} */\n            const didMutateIds = updates.filter((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => takeNewKey(newKeys, update, state))).length > 0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((/**\n                 * @param {?} id\n                 * @return {?}\n                 */\n                (id) => newKeys[id] || id));\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    /**\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(map, state) {\n        /** @type {?} */\n        const changes = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        /** @type {?} */\n        const updates = changes.filter((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ id }) => id in state.entities));\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        addAll: createStateOperator(addAllMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    /**\n     * @param {?} newModels\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(newModels, state) {\n        /** @type {?} */\n        const models = newModels.filter((/**\n         * @param {?} model\n         * @return {?}\n         */\n        model => !(selectIdValue(model, selectId) in state.entities)));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function addAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} models\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const models = [];\n        /** @type {?} */\n        const didMutateIds = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => takeUpdatedModel(models, update, state))).length >\n            0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            /** @type {?} */\n            const originalIds = state.ids;\n            /** @type {?} */\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @param {?} index\n             * @return {?}\n             */\n            (id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            }));\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((/**\n                 * @param {?} i\n                 * @return {?}\n                 */\n                (i) => state.ids[i] === originalIds[i]))) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    /**\n     * @param {?} updatesOrMap\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(updatesOrMap, state) {\n        /** @type {?} */\n        const updates = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function merge(models, state) {\n        models.sort(sort);\n        /** @type {?} */\n        const ids = [];\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            /** @type {?} */\n            const model = models[i];\n            /** @type {?} */\n            const modelId = selectIdValue(model, selectId);\n            /** @type {?} */\n            const entityId = state.ids[j];\n            /** @type {?} */\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((/**\n         * @param {?} model\n         * @param {?} i\n         * @return {?}\n         */\n        (model, i) => {\n            state.entities[selectId(model)] = model;\n        }));\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        addAll: createStateOperator(addAllMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = Object.assign({ sortComparer: false, selectId: (/**\n         * @param {?} instance\n         * @return {?}\n         */\n        (instance) => instance.id) }, options);\n    /** @type {?} */\n    const stateFactory = createInitialStateFactory();\n    /** @type {?} */\n    const selectorsFactory = createSelectorsFactory();\n    /** @type {?} */\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return Object.assign({ selectId,\n        sortComparer }, stateFactory, selectorsFactory, stateAdapter);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template T\n */\nclass Dictionary {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { createEntityAdapter, Dictionary };\n//# sourceMappingURL=entity.js.map\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nimport {UserInterface} from '../interfaces/user.interface';\r\nimport {environment} from '../../environments/environment';\r\nimport {map} from 'rxjs/operators';\r\nimport {ResponseInterface} from '../interfaces/response.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUsers(): Observable<UserInterface[]> {\r\n    return this.http.get<UserInterface[]>(`${environment.fbDbUrl}/users.json`).pipe(\r\n      map((response: {[key: string]: any}) => {\r\n        return Object\r\n          .keys(response)\r\n          .map( key => ({\r\n            ...response[key],\r\n            DOB: new Date(response[key].DOB)\r\n          }));\r\n      })\r\n    );\r\n  }\r\n\r\n  getUserById(payload: string): Observable<UserInterface> {\r\n\r\n    return this.http.get<UserInterface>(`${environment.fbDbUrl}/users/${payload}.json`);\r\n  }\r\n\r\n  createUser(payload: UserInterface): Observable<UserInterface> {\r\n\r\n    return this.http.patch(`${environment.fbDbUrl}/users/${payload.id}.json`, payload).pipe(\r\n      map((response: ResponseInterface) => {\r\n        return {\r\n          ...payload,\r\n          id: response.name,\r\n          DOB: new Date(payload.DOB),\r\n        };\r\n        }));\r\n  }\r\n\r\n\r\n  updateUser(user: UserInterface): Observable<UserInterface> {\r\n    return this.http.patch<UserInterface>(`${environment.fbDbUrl}/users/${user.id}.json`, user);\r\n  }\r\n\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Action} from '@ngrx/store';\r\nimport {UserService} from '../../services/user.service';\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\n\r\nimport * as userActions from '../actions/user.action';\r\nimport { UserInterface} from '../../interfaces/user.interface';\r\nimport {Observable, of} from 'rxjs';\r\nimport {catchError, map, mergeMap} from 'rxjs/operators';\r\n\r\n\r\n@Injectable()\r\nexport class UserEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  @Effect()\r\n  loadUsers$: Observable<Action> = this.actions$.pipe(\r\n    ofType<userActions.LoadUsers>(\r\n      userActions.UserActionType.LOAD_USERS\r\n    ),\r\n    mergeMap((action: userActions.LoadUsers) =>\r\n      this.userService.getUsers().pipe(\r\n        map(\r\n          (users: UserInterface[]) =>\r\n            new userActions.LoadUsersSuccess(users)\r\n        ),\r\n        catchError(err => of(new userActions.LoadUsersFail(err)))\r\n      )\r\n    )\r\n  );\r\n  @Effect()\r\n  loadUser$: Observable<Action> = this.actions$.pipe(\r\n    ofType<userActions.LoadUser>(\r\n      userActions.UserActionType.LOAD_USER\r\n    ),\r\n    mergeMap((action: userActions.LoadUser) =>\r\n      this.userService.getUserById(action.payload).pipe(\r\n        map(\r\n          (user: UserInterface) =>\r\n            new userActions.LoadUserSuccess(user)\r\n        ),\r\n        catchError(err => of(new userActions.LoadUserFail(err)))\r\n      )\r\n    )\r\n  );\r\n  @Effect()\r\n  createUser$: Observable<Action> = this.actions$.pipe(\r\n    ofType<userActions.CreateUser>(\r\n      userActions.UserActionType.CREATE_USER\r\n    ),\r\n    map((action: userActions.CreateUser) => action.payload),\r\n    mergeMap((user: UserInterface) =>\r\n      this.userService.createUser(user).pipe(\r\n        map(\r\n          (newUser: UserInterface) =>\r\n            new userActions.CreateUserSuccess(newUser)\r\n        ),\r\n        catchError(err => of(new userActions.CreateUserFail(err)))\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  updateUser$: Observable<Action> = this.actions$.pipe(\r\n    ofType<userActions.UpdateUser>(\r\n      userActions.UserActionType.UPDATE_USER\r\n    ),\r\n    map((action: userActions.UpdateUser) => action.payload),\r\n    mergeMap((user: UserInterface) =>\r\n      this.userService.updateUser(user).pipe(\r\n        map(\r\n          (updateUser: UserInterface) =>\r\n            new userActions.UpdateUserSuccess({\r\n              id: updateUser.id,\r\n              changes: updateUser\r\n            })\r\n        ),\r\n        catchError(err => of(new userActions.UpdateUserFail(err)))\r\n      )\r\n    )\r\n  );\r\n\r\n\r\n}\r\n","import {UserInterface} from '../../interfaces/user.interface';\r\n\r\nimport * as UserActions from '../actions/user.action';\r\nimport {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {createEntityAdapter, EntityAdapter, EntityState} from '@ngrx/entity';\r\n\r\n\r\n\r\nexport interface UserState extends EntityState<UserInterface> {\r\n  selectedUserId: string | null;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: string;\r\n}\r\n\r\n\r\n\r\n\r\nexport const userAdapter: EntityAdapter<UserInterface> = createEntityAdapter<UserInterface>();\r\n\r\nexport const defaultUser: UserState = {\r\n  ids: [],\r\n  entities: {},\r\n  selectedUserId: null,\r\n  loading: false,\r\n  loaded: false,\r\n  error: ''\r\n};\r\n\r\nexport const  initialState = userAdapter.getInitialState(defaultUser);\r\n\r\n\r\nexport function userReducer(state = initialState, action: UserActions.Action): UserState {\r\n  switch (action.type) {\r\n    case UserActions.UserActionType.LOAD_USERS_SUCCESS: {\r\n      return userAdapter.addAll(action.payload, {\r\n        ...state,\r\n        loading: false,\r\n        loaded: true\r\n      });\r\n    }\r\n    case UserActions.UserActionType.LOAD_USERS_FAIL: {\r\n      return {\r\n        ...state,\r\n        entities: {},\r\n        loading: false,\r\n        loaded: false,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    case UserActions.UserActionType.LOAD_USER_SUCCESS: {\r\n      return userAdapter.addOne(action.payload, {\r\n        ...state,\r\n        selectedUserId: action.payload.id\r\n      });\r\n    }\r\n    case UserActions.UserActionType.LOAD_USER_FAIL: {\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    case UserActions.UserActionType.CREATE_USER_SUCCESS: {\r\n      return userAdapter.addOne(action.payload, state);\r\n    }\r\n    case UserActions.UserActionType.CREATE_USER_FAIL: {\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    case UserActions.UserActionType.UPDATE_USER_SUCCESS: {\r\n      return userAdapter.updateOne(action.payload, state);\r\n    }\r\n    case UserActions.UserActionType.UPDATE_USER_FAIL: {\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nconst getUserFeatureState = createFeatureSelector<UserState>(\r\n  'users'\r\n);\r\nexport const getUsers = createSelector(\r\n  getUserFeatureState,\r\n  userAdapter.getSelectors().selectAll\r\n);\r\nexport const getUsersLoading = createSelector(\r\n  getUserFeatureState,\r\n  (state: UserState) => state.loading\r\n);\r\nexport const getUsersLoaded = createSelector(\r\n  getUserFeatureState,\r\n  (state: UserState) => state.loaded\r\n);\r\nexport const getUsersError = createSelector(\r\n  getUserFeatureState,\r\n  (state: UserState) => state.error\r\n);\r\nexport const getCurrentUserId = createSelector(\r\n  getUserFeatureState,\r\n  (state: UserState) => state.selectedUserId\r\n);\r\nexport const getCurrentUser = createSelector(\r\n  getUserFeatureState,\r\n  getCurrentUserId,\r\n  state => state.entities[state.selectedUserId]\r\n);\r\n"],"sourceRoot":"webpack:///"}