{"version":3,"sources":["./src/app/services/process.service.ts","./src/app/store/actions/process.action.ts","./src/app/store/effects/process.effects.ts","./src/app/store/reducers/process.reducer.ts"],"names":[],"mappings":"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","file":"default~app-components-incidents-incidents-module~app-components-process-process-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n\r\nimport {environment} from '../../environments/environment';\r\nimport {map} from 'rxjs/operators';\r\nimport {ResponseInterface} from '../interfaces/response.interface';\r\nimport {ProcessInterface} from '../interfaces/process.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProcessService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getProcess(): Observable<ProcessInterface[]> {\r\n    return this.http.get<ProcessInterface[]>(`${environment.fbDbUrl}/process.json`).pipe(\r\n      map((response: {[key: string]: any}) => {\r\n        return Object\r\n          .keys(response)\r\n          .map( key => ({\r\n            ...response[key],\r\n          }));\r\n      })\r\n    );\r\n  }\r\n\r\n  getProcessById(payload: string): Observable<ProcessInterface> {\r\n    return this.http.get<ProcessInterface>(`${environment.fbDbUrl}/process/${payload}.json`);\r\n  }\r\n\r\n  createProcess(payload: ProcessInterface): Observable<ProcessInterface> {\r\n    return this.http.patch(`${environment.fbDbUrl}/process/${payload.id}.json`, payload).pipe(\r\n      map((response: ResponseInterface) => {\r\n        return {\r\n          ...payload,\r\n          id: response.name,\r\n        };\r\n      }));\r\n  }\r\n\r\n\r\n  updateProcess(process: ProcessInterface): Observable<ProcessInterface> {\r\n    return this.http.patch<ProcessInterface>(`${environment.fbDbUrl}/process/${process.id}.json`, process);\r\n  }\r\n\r\n  deleteProcess(payload: string) {\r\n    return this.http.delete(`${environment.fbDbUrl}/process/${payload}.json`);\r\n  }\r\n}\r\n","import {Action} from '@ngrx/store';\r\n\r\nimport {Update} from '@ngrx/entity';\r\nimport {ProcessInterface} from '../../interfaces/process.interface';\r\n\r\n\r\nexport enum ProcessActionType {\r\n  LOAD_PROCESSES= '[Process] Load Processes',\r\n  LOAD_PROCESSES_SUCCESS = '[Process] Load Processes Success',\r\n  LOAD_PROCESSES_FAIL = '[Process] Load Processes Fail',\r\n  LOAD_PROCESS= '[Process] Load Process',\r\n  LOAD_PROCESS_SUCCESS = '[Process] Load Process Success',\r\n  LOAD_PROCESS_FAIL = '[Process] Load Process Fail',\r\n  CREATE_PROCESS= '[Process] Create Process',\r\n  CREATE_PROCESS_SUCCESS = '[Process] Create Process Success',\r\n  CREATE_PROCESS_FAIL = '[Process] Create Process Fail',\r\n  UPDATE_PROCESS= '[Process] Update Process',\r\n  UPDATE_PROCESS_SUCCESS = '[Process] Update Process Success',\r\n  UPDATE_PROCESS_FAIL = '[Process] Update Process Fail',\r\n  DELETE_PROCESS= '[Process] Delete Process',\r\n  DELETE_PROCESS_SUCCESS = '[Process] Delete Process Success',\r\n  DELETE_PROCESS_FAIL = '[Process] Delete Process Fail',\r\n}\r\nexport class LoadProcesses implements Action {\r\n  readonly type = ProcessActionType.LOAD_PROCESSES;\r\n}\r\nexport class LoadProcessesSuccess implements Action {\r\n  readonly type = ProcessActionType.LOAD_PROCESSES_SUCCESS;\r\n  constructor(public payload: ProcessInterface[]) {}\r\n}\r\nexport class LoadProcessesFail implements Action {\r\n  readonly type = ProcessActionType.LOAD_PROCESSES_FAIL;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class LoadProcess implements Action {\r\n  readonly type = ProcessActionType.LOAD_PROCESS;\r\n  constructor(public payload: string) {}\r\n}\r\nexport class LoadProcessSuccess implements Action {\r\n  readonly type = ProcessActionType.LOAD_PROCESS_SUCCESS;\r\n  constructor(public payload: ProcessInterface) {}\r\n}\r\nexport class LoadProcessFail implements Action {\r\n  readonly type = ProcessActionType.LOAD_PROCESS_FAIL;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateProcess implements Action {\r\n  readonly type = ProcessActionType.CREATE_PROCESS;\r\n  constructor(public payload: ProcessInterface) {}\r\n}\r\nexport class CreateProcessSuccess implements Action {\r\n  readonly type = ProcessActionType.CREATE_PROCESS_SUCCESS;\r\n  constructor(public payload: ProcessInterface) {}\r\n}\r\nexport class CreateProcessFail implements Action {\r\n  readonly type = ProcessActionType.CREATE_PROCESS_FAIL;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class UpdateProcess implements Action {\r\n  readonly type = ProcessActionType.UPDATE_PROCESS;\r\n  constructor(public payload: ProcessInterface) {}\r\n}\r\nexport class UpdateProcessSuccess implements Action {\r\n  readonly type = ProcessActionType.UPDATE_PROCESS_SUCCESS;\r\n  constructor(public payload: Update<ProcessInterface>) {}\r\n}\r\nexport class UpdateProcessFail implements Action {\r\n  readonly type = ProcessActionType.UPDATE_PROCESS_FAIL;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteProcess implements Action {\r\n  readonly type = ProcessActionType.DELETE_PROCESS;\r\n  constructor(public payload: string) {}\r\n}\r\nexport class DeleteProcessSuccess implements Action {\r\n  readonly type = ProcessActionType.DELETE_PROCESS_SUCCESS;\r\n  constructor(public payload: string) {}\r\n}\r\nexport class DeleteProcessFail implements Action {\r\n  readonly type = ProcessActionType.DELETE_PROCESS_FAIL;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport type Action =\r\n  LoadProcesses | LoadProcessesSuccess | LoadProcessesFail |\r\n  LoadProcess | LoadProcessSuccess | LoadProcessFail |\r\n  CreateProcess | CreateProcessSuccess | CreateProcessFail |\r\n  UpdateProcess| UpdateProcessSuccess | UpdateProcessFail |\r\n  DeleteProcess | DeleteProcessSuccess | DeleteProcessFail ;\r\n","import {Injectable} from '@angular/core';\r\nimport {Action} from '@ngrx/store';\r\n\r\nimport {Actions, Effect, ofType} from '@ngrx/effects';\r\n\r\nimport * as processActions from '../actions/process.action';\r\n\r\nimport {Observable, of} from 'rxjs';\r\nimport {catchError, map, mergeMap} from 'rxjs/operators';\r\nimport {ProcessService} from '../../services/process.service';\r\nimport {ProcessInterface} from '../../interfaces/process.interface';\r\n\r\n\r\n@Injectable()\r\nexport class ProcessEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private processService: ProcessService\r\n  ) {}\r\n\r\n  @Effect()\r\n  loadProcesses$: Observable<Action> = this.actions$.pipe(\r\n    ofType<processActions.LoadProcesses>(\r\n      processActions.ProcessActionType.LOAD_PROCESSES\r\n    ),\r\n    mergeMap((action: processActions.LoadProcesses) =>\r\n      this.processService.getProcess().pipe(\r\n        map(\r\n          (processes: ProcessInterface[]) =>\r\n            new processActions.LoadProcessesSuccess(processes)\r\n        ),\r\n        catchError(error => of(new processActions.LoadProcessesFail(error)))\r\n      )\r\n    )\r\n  );\r\n  @Effect()\r\n  loadProcess$: Observable<Action> = this.actions$.pipe(\r\n    ofType<processActions.LoadProcess>(\r\n      processActions.ProcessActionType.LOAD_PROCESS\r\n    ),\r\n    mergeMap((action: processActions.LoadProcess) =>\r\n      this.processService.getProcessById(action.payload).pipe(\r\n        map(\r\n          (process: ProcessInterface) =>\r\n            new processActions.LoadProcessSuccess(process)\r\n        ),\r\n        catchError(error => of(new processActions.LoadProcessFail(error)))\r\n      )\r\n    )\r\n  );\r\n  @Effect()\r\n  createProcess$: Observable<Action> = this.actions$.pipe(\r\n    ofType<processActions.CreateProcess>(\r\n      processActions.ProcessActionType.CREATE_PROCESS\r\n    ),\r\n    map((action: processActions.CreateProcess) => action.payload),\r\n    mergeMap((process: ProcessInterface) =>\r\n      this.processService.createProcess(process).pipe(\r\n        map(\r\n          (newProcess: ProcessInterface) =>\r\n            new processActions.CreateProcessSuccess(newProcess)\r\n        ),\r\n        catchError(err => of(new processActions.CreateProcessFail(err)))\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  updateProcess$: Observable<Action> = this.actions$.pipe(\r\n    ofType<processActions.UpdateProcess>(\r\n      processActions.ProcessActionType.UPDATE_PROCESS\r\n    ),\r\n    map((action: processActions.UpdateProcess) => action.payload),\r\n    mergeMap((process: ProcessInterface) =>\r\n      this.processService.updateProcess(process).pipe(\r\n        map(\r\n          (updateProcess: ProcessInterface) =>\r\n            new processActions.UpdateProcessSuccess({\r\n              id: updateProcess.id,\r\n              changes: updateProcess\r\n            })\r\n        ),\r\n        catchError(err => of(new processActions.UpdateProcessFail(err)))\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  deleteProcess$: Observable<Action> = this.actions$.pipe(\r\n    ofType<processActions.DeleteProcess>(\r\n      processActions.ProcessActionType.DELETE_PROCESS\r\n    ),\r\n    map((action: processActions.DeleteProcess) => action.payload),\r\n    mergeMap((id: any) =>\r\n      this.processService.deleteProcess(id).pipe(\r\n        map(\r\n          () => new processActions.DeleteProcessSuccess(id)\r\n        ),\r\n        catchError(error => of(new processActions.DeleteProcessFail(error)))\r\n      )\r\n    )\r\n  );\r\n}\r\n","import {createEntityAdapter, EntityAdapter, EntityState} from '@ngrx/entity';\r\nimport * as ProcessActions from '../actions/process.action';\r\nimport {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {ProcessInterface} from '../../interfaces/process.interface';\r\n\r\n\r\n\r\nexport interface ProcessState extends EntityState<ProcessInterface> {\r\n  selectedProcessId: string | null;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  error: string;\r\n}\r\n\r\nexport const processAdapter: EntityAdapter<ProcessInterface> = createEntityAdapter<ProcessInterface>();\r\n\r\nexport const defaultProcess: ProcessState = {\r\n  ids: [],\r\n  entities: {},\r\n  selectedProcessId: null,\r\n  loading: false,\r\n  loaded: false,\r\n  error: ''\r\n};\r\nexport const  initialState = processAdapter.getInitialState(defaultProcess);\r\n\r\nexport function processReducer(state = initialState, action: ProcessActions.Action): ProcessState {\r\n  switch (action.type) {\r\n    case ProcessActions.ProcessActionType.LOAD_PROCESSES_SUCCESS: {\r\n      return processAdapter.addAll(action.payload, {\r\n        ...state,\r\n        loading: false,\r\n        loaded: true\r\n      });\r\n    }\r\n    case ProcessActions.ProcessActionType.LOAD_PROCESSES_FAIL: {\r\n      return {\r\n        ...state,\r\n        entities: {},\r\n        loading: false,\r\n        loaded: false,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    case ProcessActions.ProcessActionType.LOAD_PROCESS_SUCCESS: {\r\n      return processAdapter.addOne(action.payload, {\r\n        ...state,\r\n        selectedProcessId: action.payload.id\r\n      });\r\n    }\r\n    case ProcessActions.ProcessActionType.LOAD_PROCESS_FAIL: {\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    case ProcessActions.ProcessActionType.CREATE_PROCESS_SUCCESS: {\r\n      return processAdapter.addOne(action.payload, state);\r\n    }\r\n    case ProcessActions.ProcessActionType.CREATE_PROCESS_FAIL: {\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    case ProcessActions.ProcessActionType.UPDATE_PROCESS_SUCCESS: {\r\n      return processAdapter.updateOne(action.payload, state);\r\n    }\r\n    case ProcessActions.ProcessActionType.UPDATE_PROCESS_FAIL: {\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    case ProcessActions.ProcessActionType.DELETE_PROCESS_SUCCESS: {\r\n      return processAdapter.removeOne(action.payload, state);\r\n    }\r\n    case ProcessActions.ProcessActionType.DELETE_PROCESS_FAIL: {\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\nconst getProcessFeatureState = createFeatureSelector<ProcessState>(\r\n  'processes'\r\n);\r\n\r\nexport const getProcesses = createSelector(\r\n  getProcessFeatureState,\r\n  processAdapter.getSelectors().selectAll\r\n);\r\nexport const getProcessesLoadding = createSelector(\r\n  getProcessFeatureState,\r\n  (state: ProcessState) => state.loading\r\n);\r\nexport const getProcessesLoaded = createSelector(\r\n  getProcessFeatureState,\r\n  (state: ProcessState) => state.loaded\r\n);\r\nexport const getProcessesError = createSelector(\r\n  getProcessFeatureState,\r\n  (state: ProcessState) => state.error\r\n);\r\nexport const getCurrentProcessId = createSelector(\r\n  getProcessFeatureState,\r\n  (state: ProcessState) => state.selectedProcessId\r\n);\r\nexport const getCurrentProcess = createSelector(\r\n  getProcessFeatureState,\r\n  getCurrentProcessId,\r\n  state => state.entities[state.selectedProcessId]\r\n);\r\n"],"sourceRoot":"webpack:///"}